"""
B3.1 ‚Äî –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ ‚Üí POST /create-invoice ‚Üí –ø–æ–ª—É—á–µ–Ω invoiceUrl.

–û–∂–∏–¥–∞–Ω–∏–µ:
- –•–µ–Ω–¥–ª–µ—Ä on_pay –¥–µ–ª–∞–µ—Ç POST –Ω–∞ API_BASE/create-invoice/ c payload {bot_id, user_id, plan_id}.
- –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–≤–µ—Ç–µ ok + invoiceUrl ‚Äî –±–æ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –∫–Ω–æ–ø–∫—É ¬´üí≥ –û–ø–ª–∞—Ç–∏—Ç—å¬ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL.
- –ï—Å—Ç—å –∫–Ω–æ–ø–∫–∞ ¬´‚¨Ö –ù–∞–∑–∞–¥¬ª.
- –ö–æ–ª–±—ç–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è (cb.answer()).
"""
import asyncio
import pytest

aiogram = pytest.importorskip("aiogram")  # noqa: F401
import bot.main as botmod  # noqa: E402
from bot.main import on_pay  # noqa: E402


class FakeFromUser:
    def __init__(self, user_id: int):
        self.id = user_id


class FakeMessage:
    def __init__(self):
        self.last_text = None
        self.last_markup = None

    async def edit_text(self, text: str, reply_markup=None, **kwargs):
        self.last_text = text
        self.last_markup = reply_markup


class FakeCallbackQuery:
    def __init__(self, user_id: int, plan_id: int):
        self.from_user = FakeFromUser(user_id)
        self.data = f"pay:{plan_id}"
        self.message = FakeMessage()
        self.answered = False

    async def answer(self, *_, **__):
        self.answered = True


class FakeResp:
    def __init__(self, json_data):
        self._json = json_data

    async def __aenter__(self):
        return self

    async def __aexit__(self, exc_type, exc, tb):
        return False

    async def json(self):
        return self._json


class FakeSession:
    def __init__(self):
        self.last_url = None
        self.last_json = None
        self.timeout = None

    def post(self, url, json, timeout):
        self.last_url = url
        self.last_json = json
        self.timeout = timeout
        # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç Django API
        return FakeResp({"ok": True, "invoiceUrl": "https://secure.wayforpay.com/pay?test=1"})


@pytest.mark.covers("B3.1")
def test_on_pay_success_shows_invoice_button(monkeypatch):
    """B3.1: on_pay –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å POST –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º URL."""
    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    monkeypatch.setattr(botmod, "BOT_ID", 1)
    monkeypatch.setattr(botmod, "API_BASE", "http://127.0.0.1:8000/api/payments/wayforpay")

    cb = FakeCallbackQuery(user_id=123456, plan_id=42)
    session = FakeSession()

    asyncio.run(on_pay(cb, session))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª POST –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏ —Å –Ω—É–∂–Ω—ã–º payload
    assert session.last_url.endswith("/create-invoice/")
    assert session.last_json == {"bot_id": 1, "user_id": 123456, "plan_id": 42}

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ —Å invoiceUrl
    kb = cb.message.last_markup
    assert kb is not None and hasattr(kb, "inline_keyboard")
    # –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    buttons = [btn for row in kb.inline_keyboard for btn in row]
    # url –º–æ–∂–µ—Ç –±—ã—Ç—å None, –ø–æ—ç—Ç–æ–º—É (.. or "")
    pay_buttons = [b for b in buttons if (getattr(b, "url", "") or "").startswith("https://secure.wayforpay.com/pay")]
    assert len(pay_buttons) == 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª —Å URL WayForPay"

    # –ï—Å—Ç—å –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
    assert any(
        getattr(b, "callback_data", "") == "ui:back" or getattr(b, "text", "") == "‚¨Ö –ù–∞–∑–∞–¥"
        for b in buttons
    ), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–Ω–æ–ø–∫–∞ ¬´‚¨Ö –ù–∞–∑–∞–¥¬ª"

    # –ö–æ–ª–±—ç–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
    assert cb.answered is True
