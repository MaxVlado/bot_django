# Generated by Django 5.2.5 on 2025-10-26 19:49

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0005_logdummy'),
        ('subscriptions', '0002_subscription_amount_subscription_order_reference_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContentTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Название топика', max_length=500)),
                ('description', models.TextField(blank=True, help_text='Описание курса')),
                ('duration_days', models.PositiveIntegerField(default=30, help_text='Продолжительность курса в днях')),
                ('sequence_number', models.PositiveIntegerField(default=1, help_text='Номер топика в последовательности (1,2,3...)')),
                ('cover_image', models.FileField(blank=True, help_text='Обложка курса', null=True, upload_to='content/covers/')),
                ('enabled', models.BooleanField(default=True, help_text='Курс активен')),
                ('sort_order', models.IntegerField(default=0, help_text='Порядок сортировки')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_topics', to='core.bot')),
            ],
            options={
                'verbose_name': 'Топик курса',
                'verbose_name_plural': 'Топики курсов',
                'db_table': 'content_topics',
                'ordering': ['sequence_number', 'sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ContentLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_number', models.PositiveIntegerField(help_text='Номер урока/дня (1-30)')),
                ('title', models.CharField(blank=True, help_text="Название урока (например, 'День 20')", max_length=255)),
                ('enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='content.contenttopic')),
            ],
            options={
                'verbose_name': 'Урок',
                'verbose_name_plural': 'Уроки',
                'db_table': 'content_lessons',
                'ordering': ['lesson_number'],
            },
        ),
        migrations.CreateModel(
            name='Phase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Уникальный идентификатор (thema, voice, task, meditation, summary)')),
                ('title', models.CharField(help_text='Название фазы', max_length=255)),
                ('default_time', models.TimeField(help_text='Время показа по умолчанию')),
                ('sort_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_phases', to='core.bot')),
            ],
            options={
                'verbose_name': 'Фаза дня',
                'verbose_name_plural': 'Фазы дня',
                'db_table': 'content_phases',
                'ordering': ['sort_order', 'default_time'],
            },
        ),
        migrations.CreateModel(
            name='ContentPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Заголовок поста', max_length=500)),
                ('content', models.TextField(blank=True, help_text='Текстовое содержимое или caption к медиа')),
                ('media_file', models.FileField(blank=True, help_text='Медиа файл (audio/video/photo)', null=True, upload_to='content/media/')),
                ('post_type', models.CharField(choices=[('text', 'Текст'), ('audio', 'Аудио'), ('video', 'Видео'), ('photo', 'Фото')], default='text', editable=False, help_text='Тип поста (определяется автоматически)', max_length=10)),
                ('send_time', models.TimeField(help_text='Время отправки поста (конкретное или из phase.default_time)')),
                ('sort_order', models.IntegerField(default=0, help_text='Порядок сортировки постов в дне')),
                ('enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='content.contentlesson')),
                ('phase', models.ForeignKey(help_text='Фаза дня (определяет время по умолчанию)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to='content.phase')),
            ],
            options={
                'verbose_name': 'Пост',
                'verbose_name_plural': 'Посты',
                'db_table': 'content_posts',
                'ordering': ['lesson__lesson_number', 'send_time', 'sort_order'],
            },
        ),
        migrations.CreateModel(
            name='TopicPlanAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month_number', models.PositiveIntegerField(default=1, help_text='Номер месяца подписки (1=первый месяц, 2=второй...)')),
                ('sort_order', models.IntegerField(default=0)),
                ('enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subscriptions.plan')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.contenttopic')),
            ],
            options={
                'verbose_name': 'Доступ к топику',
                'verbose_name_plural': 'Доступы к топикам',
                'db_table': 'content_topic_plan_access',
                'ordering': ['month_number', 'sort_order'],
            },
        ),
        migrations.AddField(
            model_name='contenttopic',
            name='plans',
            field=models.ManyToManyField(help_text='Планы, дающие доступ к этому топику', related_name='content_topics', through='content.TopicPlanAccess', to='subscriptions.plan'),
        ),
        migrations.CreateModel(
            name='UserContentProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_lesson_number', models.PositiveIntegerField(default=1, help_text='Текущий урок/день (1-30)')),
                ('last_sent_at', models.DateTimeField(blank=True, help_text='Когда был отправлен последний пост', null=True)),
                ('started_at', models.DateTimeField(help_text='Когда пользователь начал курс')),
                ('completed', models.BooleanField(default=False, help_text='Курс завершен')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Когда курс был завершен', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_post_sent', models.ForeignKey(blank=True, help_text='Последний отправленный пост', null=True, on_delete=django.db.models.deletion.SET_NULL, to='content.contentpost')),
                ('subscription', models.ForeignKey(help_text='Подписка, по которой доступен курс', on_delete=django.db.models.deletion.CASCADE, related_name='content_progress', to='subscriptions.subscription')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='content.contenttopic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_progress', to='core.telegramuser')),
            ],
            options={
                'verbose_name': 'Прогресс пользователя',
                'verbose_name_plural': 'Прогресс пользователей',
                'db_table': 'content_user_progress',
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddIndex(
            model_name='contentlesson',
            index=models.Index(fields=['topic', 'lesson_number'], name='content_les_topic_i_4be725_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contentlesson',
            unique_together={('topic', 'lesson_number')},
        ),
        migrations.AddIndex(
            model_name='phase',
            index=models.Index(fields=['bot', 'slug'], name='content_pha_bot_id_2c947b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='phase',
            unique_together={('bot', 'slug')},
        ),
        migrations.AddIndex(
            model_name='contentpost',
            index=models.Index(fields=['lesson', 'send_time', 'enabled'], name='content_pos_lesson__434a70_idx'),
        ),
        migrations.AddIndex(
            model_name='contentpost',
            index=models.Index(fields=['lesson', 'phase'], name='content_pos_lesson__0853cf_idx'),
        ),
        migrations.AddIndex(
            model_name='topicplanaccess',
            index=models.Index(fields=['plan', 'month_number'], name='content_top_plan_id_e1c7b6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='topicplanaccess',
            unique_together={('plan', 'month_number')},
        ),
        migrations.AddIndex(
            model_name='contenttopic',
            index=models.Index(fields=['bot', 'enabled'], name='content_top_bot_id_7400dc_idx'),
        ),
        migrations.AddIndex(
            model_name='contenttopic',
            index=models.Index(fields=['sequence_number'], name='content_top_sequenc_21ff58_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contenttopic',
            unique_together={('bot', 'sequence_number')},
        ),
        migrations.AddIndex(
            model_name='usercontentprogress',
            index=models.Index(fields=['user', 'topic'], name='content_use_user_id_962b46_idx'),
        ),
        migrations.AddIndex(
            model_name='usercontentprogress',
            index=models.Index(fields=['subscription', 'completed'], name='content_use_subscri_5d070a_idx'),
        ),
        migrations.AddIndex(
            model_name='usercontentprogress',
            index=models.Index(fields=['current_lesson_number'], name='content_use_current_c28df6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usercontentprogress',
            unique_together={('user', 'topic', 'subscription')},
        ),
    ]
