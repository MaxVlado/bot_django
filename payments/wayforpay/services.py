# ================================================================
# wayforpay/services.py
# ================================================================
from decimal import Decimal
from typing import Dict, Optional
from django.utils import timezone
from django.db import transaction
from django.conf import settings


from .api import WayForPayAPI
from core.models import TelegramUser
from subscriptions.models import Plan, Subscription, SubscriptionStatus
from subscriptions.services import SubscriptionService
from payments.models import Invoice, PaymentStatus, VerifiedUser




class WayForPayService:
    """–°–µ—Ä–≤–∏—Å WayForPay: —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞, –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è."""

    def __init__(self, bot_id: int = None):
        if bot_id:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω bot_id, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
            from core.models import Bot
            bot_model = Bot.objects.select_related('merchant_config').get(bot_id=bot_id)
            self.api = WayForPayAPI(merchant_config=bot_model.merchant_config)
        else:
            # Fallback –Ω–∞ –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.api = WayForPayAPI()

    @transaction.atomic
    def create_invoice(self, bot_id: int, user_id: int, plan_id: int, amount: Optional[Decimal] = None) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –∏ –≤–µ—Ä–Ω—É—Ç—å URL –æ–ø–ª–∞—Ç—ã.
        """
        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ —Å –µ–≥–æ merchant_config
        from core.models import Bot
        import logging
        logger = logging.getLogger(__name__)
        
        try:
            bot_model = Bot.objects.select_related('merchant_config').get(bot_id=bot_id)
            merchant_config = bot_model.merchant_config
            
            logger.info(f"Bot {bot_id} merchant_account from DB: {merchant_config.merchant_account}")
            logger.info(f"Bot {bot_id} secret_key from DB: {merchant_config.secret_key[:10]}...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
            self.api = WayForPayAPI(merchant_config=merchant_config)
            
            logger.info(f"API initialized with merchant_account: {self.api.merchant_account}")
            
        except Exception as e:
            logger.error(f"Error loading bot config for bot_id={bot_id}: {e}")
            # Fallback –Ω–∞ –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.api = WayForPayAPI()
            logger.info(f"Using fallback settings, merchant_account: {self.api.merchant_account}")
        
    
        
        user, _ = TelegramUser.objects.get_or_create(
            user_id=user_id,
            defaults={"username": None, "first_name": None, "last_name": None},
        )

        plan = Plan.objects.get(id=plan_id, bot_id=bot_id, enabled=True)

        order_reference = Invoice.generate_order_reference(bot_id, user_id, plan_id)
        inv = Invoice.objects.create(
            order_reference=order_reference,
            user=user,
            plan=plan,
            bot_id=bot_id,
            amount=amount or plan.price,
            currency=getattr(plan, "currency", "UAH"),
            payment_status=PaymentStatus.PENDING,
        )

        payload = {
            "orderReference": inv.order_reference,
            "amount": int(inv.amount),
            "currency": inv.currency,
            "productName": [plan.name],
            "productCount": [1],
            "productPrice": [int(inv.amount)],
        }

        client_data = {}
        if user.first_name:
            client_data["clientFirstName"] = user.first_name
        if user.last_name:
            client_data["clientLastName"] = user.last_name
        if inv.phone:
            client_data["clientPhone"] = inv.phone
        if inv.email:
            client_data["clientEmail"] = inv.email
        if client_data:
            payload["clientData"] = client_data

        form_data = self.api.generate_payment_form_data(payload)
        inv.raw_request_payload = form_data
        inv.save(update_fields=["raw_request_payload", "updated_at"])

        import urllib.request
        import urllib.parse
        import json
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST
            json_data = json.dumps(form_data).encode('utf-8')
            
            # –°–æ–∑–¥–∞–µ–º POST-–∑–∞–ø—Ä–æ—Å
            req = urllib.request.Request(
                'https://api.wayforpay.com/api',
                data=json_data,
                headers={'Content-Type': 'application/json'}
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            with urllib.request.urlopen(req, timeout=30) as response:
                if response.status == 200:
                    result = json.loads(response.read().decode('utf-8'))
                    if result.get('invoiceUrl'):
                        return result['invoiceUrl']
                    else:
                        raise ValueError(f"No invoiceUrl in response: {result}")
                else:
                    raise ValueError(f"WayForPay API error: {response.status}")
                    
        except Exception as e:
            raise ValueError(f"Failed to create invoice: {e}")
      
   
    @transaction.atomic
    def handle_webhook(self, payload: Dict) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º orderReference: ORDER_timestamp+rand_user_plan
        """
        import logging
        logger = logging.getLogger(__name__)
        
        logger.info(f'Received webhook from WayForPay: {payload}')
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        from django.conf import settings
        
        verify_signature = getattr(settings, 'WAYFORPAY_VERIFY_SIGNATURE', True)
        
        if verify_signature and not self.api.validate_response_signature(payload):
            logger.error('Invalid signature from WayForPay')
            return {"status": "accept", "message": "Invalid signature"}
        
        # 2. –ü–æ–ª—É—á–∞–µ–º orderReference (–ø–µ—Ä–µ–Ω–µ—Å–ª–∏ –≤—ã—à–µ, –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª—é—Ç—ã)
        order_reference = payload.get('orderReference', '').strip().rstrip(';')
        
        if not order_reference:
            logger.error("orderReference is missing")
            return {"status": "accept", "message": "orderReference required"}
        
        # 2.5. –ü—Ä–æ–≤–µ—Ä–∫–∞ TTL (–∑–∞—â–∏—Ç–∞ –æ—Ç replay-–∞—Ç–∞–∫ —Å—Ç–∞—Ä—ã–º–∏ webhook)
        ttl_seconds = getattr(settings, 'WAYFORPAY_WEBHOOK_TTL_SECONDS', None)
        if ttl_seconds:
            processing_date = payload.get('processingDate')
            if processing_date:
                from django.utils import timezone
                now_ts = int(timezone.now().timestamp())
                age_seconds = now_ts - int(processing_date)
                
                if age_seconds > ttl_seconds:
                    logger.warning(f"‚ö†Ô∏è Webhook too old: age={age_seconds}s, TTL={ttl_seconds}s")
                    return {"status": "accept", "message": "Webhook expired"}

        
        # 3. –ü–∞—Ä—Å–∏–Ω–≥ orderReference
        try:
            user_id, plan_id, timestamp = self.api.parse_order_reference(order_reference)
            logger.info(f"‚úÖ Parsed: user_id={user_id}, plan_id={plan_id}, timestamp={timestamp}")
            
        except ValueError as e:
            logger.error(f"‚ùå Parse failed: {e}")
            
            # FALLBACK: –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ Invoice (–Ω–∞ —Å–ª—É—á–∞–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è)
            logger.info(f"üîç Trying fallback: direct Invoice lookup")
            
            invoice = Invoice.objects.filter(
                order_reference=order_reference
            ).select_related('user', 'plan').first()
            
            if not invoice:
                logger.error(f"‚ùå Invoice not found: {order_reference}")
                return {"status": "accept", "message": "Invoice not found"}
            
            user_id = invoice.user.user_id
            plan = invoice.plan  # ‚≠ê –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç plan
            bot_id = invoice.bot_id
            
            logger.info(f"‚úÖ Fallback success: user_id={user_id}, plan_id={plan.id}, bot_id={bot_id}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ (–ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç plan)
            base_reference = order_reference.split('_WFPREG-')[0]
            return self._process_payment_status(payload, user_id, plan, bot_id, base_reference)
        
        # 4. ‚≠ê –ù–û–í–û–ï: –ù–∞—Ö–æ–¥–∏–º Invoice –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º—ã –∏ –≤–∞–ª—é—Ç—ã
        base_reference_for_lookup = order_reference.split('_WFPREG-')[0]
        
        invoice = Invoice.objects.filter(
            order_reference=base_reference_for_lookup
        ).select_related('user', 'plan').first()
        
        if not invoice:
            logger.error(f"‚ùå Invoice not found: {base_reference_for_lookup}")
            return {"status": "accept", "message": "Invoice not found"}
        
        # 4.5. ‚≠ê –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ merchantAccount (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        verify_merchant = getattr(settings, 'WAYFORPAY_VERIFY_MERCHANT', False)

        if verify_merchant:
            bot_id = invoice.bot_id
            from payments.models import MerchantConfig
            
            try:
                merchant_config = MerchantConfig.objects.get(bot__bot_id=bot_id)
                payload_merchant = payload.get('merchantAccount', '').strip()
                expected_merchant = merchant_config.merchant_account.strip()
                
                if payload_merchant != expected_merchant:
                    logger.warning(f"Foreign merchant account: payload={payload_merchant}, expected={expected_merchant}")
                    return {"status": "accept", "message": "Foreign merchant account"}
            except MerchantConfig.DoesNotExist:
                logger.warning(f"MerchantConfig not found for bot_id={bot_id}, skipping merchant verification")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç.–∫. MerchantConfig –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö

        
        # 5. ‚≠ê –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç—ã (case-insensitive, –∏–∑ Invoice)
        payload_currency = str(payload.get('currency', '')).upper()
        invoice_currency = str(invoice.currency).upper()
        
        if payload_currency != invoice_currency:
            logger.warning(f"Currency mismatch: payload={payload_currency}, invoice={invoice_currency}")
            return {"status": "accept", "message": "Currency mismatch"}
        
        # 6. ‚≠ê –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã (–¥–ª—è APPROVED)
        transaction_status = str(payload.get('transactionStatus', '')).upper()
        
        if transaction_status == 'APPROVED':
            payload_amount = float(payload.get('amount', 0))
            invoice_amount = float(invoice.amount)
            
            # –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.01 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è float
            if abs(payload_amount - invoice_amount) > 0.01:
                logger.warning(f"Amount mismatch: payload={payload_amount}, invoice={invoice_amount}")
                return {"status": "accept", "message": "Amount mismatch"}
        
        # 7. ‚≠ê –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Invoice –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ –ø–ª–∞–Ω–∞
        plan = invoice.plan
        bot_id = invoice.bot_id
        
        logger.info(f"Using Invoice data: plan_id={plan.id}, bot_id={bot_id}")
        
        # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
        base_reference = order_reference.split('_WFPREG-')[0]
        is_recurring = '_WFPREG' in order_reference
        
        if not is_recurring:
            # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
            existing_invoice = Invoice.objects.filter(
                order_reference=base_reference,
                payment_status=PaymentStatus.APPROVED
            ).first()
            
            if existing_invoice:
                logger.info(f"üîÑ Duplicate webhook for: {order_reference}")
                return {"status": "accept"}
        else:
            # –≠—Ç–æ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π
            logger.info(f"üí≥ Recurring payment detected: {order_reference}")
        
        # 9. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ (–ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç plan, –Ω–µ plan.id)
        return self._process_payment_status(payload, user_id, plan, bot_id, base_reference, is_recurring)
    
    def _update_invoice_fields(self, invoice: Invoice, payload: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏–Ω–≤–æ–π—Å–∞ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
        issuer_country = payload.get('issuerBankCountry')
        if issuer_country:
            issuer_country = issuer_country[:3].upper()
        
        invoice.phone = invoice.phone or payload.get('phone')
        invoice.email = invoice.email or payload.get('email') 
        invoice.card_pan = invoice.card_pan or payload.get('cardPan')
        invoice.card_type = invoice.card_type or payload.get('cardType')
        invoice.issuer_bank = invoice.issuer_bank or payload.get('issuerBankName')
        invoice.issuer_country = invoice.issuer_country or issuer_country  # –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ï
        invoice.payment_system = invoice.payment_system or payload.get('paymentSystem')
        invoice.fee = invoice.fee or payload.get('fee')
        invoice.rrn = invoice.rrn or payload.get('rrn')
        invoice.approval_code = invoice.approval_code or payload.get('approvalCode')
        invoice.terminal = invoice.terminal or payload.get('terminal')
        invoice.reason_code = invoice.reason_code or payload.get('reasonCode')
        invoice.save()
   
    def _process_payment_status(self, payload: Dict, user_id: int, plan, bot_id: int, base_reference: str, is_recurring: bool = False) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
        
        Args:
            plan: –û–±—ä–µ–∫—Ç Plan (–Ω–µ plan_id!) - –±–µ—Ä–µ—Ç—Å—è –∏–∑ Invoice
        """
        import logging
        from django.utils import timezone
        from subscriptions.models import Subscription
        from core.models import TelegramUser
        
        logger = logging.getLogger(__name__)
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ (case-insensitive)
        transaction_status = payload.get('transactionStatus', '').upper()
        
        # ‚≠ê –ò–ó–ú–ï–ù–ï–ù–û: –ù–ï –∏—â–µ–º –ø–ª–∞–Ω –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        # plan —É–∂–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ Invoice –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å disabled - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        plan_id = plan.id
        logger.info(f"Processing payment with plan_id={plan_id}, status={transaction_status}")
        
        if transaction_status == 'APPROVED':
            return self._handle_approved_payment(payload, user_id, plan_id, bot_id, base_reference, is_recurring)
        elif transaction_status in ['DECLINED', 'EXPIRED', 'CANCELED']:
            return self._handle_declined_payment(payload, user_id, plan_id, bot_id, base_reference)
        else:
            logger.warning(f"Unknown transaction status: {transaction_status}")
            return {"status": "accept", "message": f"Unknown status: {transaction_status}"}
        
    def _handle_approved_payment(self, payload: Dict, user_id: int, plan_id: int, bot_id: int, base_reference: str, is_recurring: bool = False) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        import logging
        from django.utils import timezone
        from datetime import timedelta
        from subscriptions.models import Plan, Subscription, SubscriptionStatus
        from core.models import TelegramUser
        from payments.models import VerifiedUser
        
        logger = logging.getLogger(__name__)
        
       # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        plan = Plan.objects.get(id=plan_id)
        user, _ = TelegramUser.objects.get_or_create(user_id=user_id)

        # ‚≠ê –ê–¢–û–ú–ê–†–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω PENDING (–∞—Ç–æ–º–∞—Ä–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î)
        from payments.models import Invoice
        # ‚≠ê –ê–¢–û–ú–ê–†–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê —Ç–æ–ª—å–∫–æ –¥–ª—è –ù–ï —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        if not is_recurring:
            updated_count = Invoice.objects.filter(
                order_reference=base_reference,
                payment_status=PaymentStatus.PENDING
            ).update(
                payment_status='PROCESSING',
                updated_at=timezone.now()
            )
            
            if updated_count == 0:
                logger.info(f"üîÑ Invoice already being processed, skipping: {base_reference}")
                return {"status": "accept"}
            
            logger.info(f"‚úÖ Captured invoice for processing: {base_reference}")

            

        amount = float(payload.get('amount', 0))

        # –ü–æ–ª—É—á–∞–µ–º invoice –¥–ª—è —á—Ç–µ–Ω–∏—è snapshot duration_days (–µ—Å–ª–∏ –µ—Å—Ç—å)
        inv = Invoice.objects.filter(order_reference=base_reference).first()
        if inv and inv.raw_request_payload and 'planDurationDays' in inv.raw_request_payload:
            duration_days = int(inv.raw_request_payload['planDurationDays'])
            logger.info(f"Using snapshot duration_days={duration_days} from invoice")
        else:
            duration_days = plan.duration_days
            logger.info(f"Using current plan duration_days={duration_days}")

        transaction_id = payload.get('transactionId')
        
        # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
        starts_from = timezone.now()
        
        # –†–∞–±–æ—Ç–∞ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç race condition)
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            subscription = Subscription.objects.select_for_update().get(
                bot_id=bot_id,
                user=user
            )
            created = False
        except Subscription.DoesNotExist:
            # –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
            subscription, created = Subscription.objects.get_or_create(
                bot_id=bot_id,
                user=user,
                defaults={
                    'user': user,
                    'plan': plan,
                    'starts_at': starts_from,
                    'expires_at': starts_from + timedelta(days=duration_days),
                    'status': SubscriptionStatus.ACTIVE,
                    'amount': amount,
                    'order_reference': base_reference,
                    'transaction_id': transaction_id,
                }
            )
        
        if created:
            # –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            logger.info(f"New subscription created for user {user_id}")
            self._setup_new_subscription(subscription, payload, duration_days)
        else:
            # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
            logger.info(f"Extending subscription for user {user_id}")
            self._extend_subscription(subscription, duration_days)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            subscription.amount = amount
            subscription.order_reference = base_reference
            subscription.transaction_id = transaction_id
            
            # ‚≠ê –î–û–ë–ê–í–ò–¢–¨: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –º–∞—Å–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if payload.get('recToken'):
                subscription.card_token = payload.get('recToken')
            if payload.get('cardPan'):
                subscription.card_masked = payload.get('cardPan')
            
            subscription.save()
    
        # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        self._update_or_create_invoice(base_reference, payload, bot_id, user_id, plan_id, amount, 'APPROVED')
        
        # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º VerifiedUser
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º invoice, –ø–æ—Ç–æ–º –≤—ã–∑—ã–≤–∞–µ–º _update_verified_user
        inv = Invoice.objects.get(order_reference=base_reference)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å invoice -> subscription
        inv.subscription_id = subscription.id
        inv.save(update_fields=['subscription_id', 'updated_at'])

        self._update_verified_user(bot_id, user_id, payload, inv)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º debounce –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self._handle_payment_notification(bot_id, user_id, plan_id, base_reference, subscription)
        
        return {"status": "accept"}
    
    def _handle_declined_payment(self, payload: Dict, user_id: int, plan_id: int, bot_id: int, base_reference: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        import logging
        from core.models import TelegramUser
        from subscriptions.models import Plan
        
        logger = logging.getLogger(__name__)
        logger.info(f"Processing DECLINED payment for user {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        user = TelegramUser.objects.get(user_id=user_id)
        plan = Plan.objects.get(id=plan_id)
        
        transaction_status = payload.get('transactionStatus', '').upper()
        amount = float(payload.get('amount', 0))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º invoice —Å—Ç–∞—Ç—É—Å–æ–º DECLINED/EXPIRED/CANCELED
        self._update_or_create_invoice(
            base_reference, 
            payload, 
            bot_id, 
            user_id, 
            plan_id, 
            amount, 
            transaction_status
        )
        
        logger.info(f"Invoice marked as {transaction_status}")
        
        return {"status": "accept"}
    
    def _setup_new_subscription(self, subscription: Subscription, payload: Dict, duration_days: int):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        import logging
        from django.utils import timezone
        from datetime import timedelta
        
        logger = logging.getLogger(__name__)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –º–∞—Å–∫—É –∫–∞—Ä—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if payload.get('recToken'):
            subscription.card_token = payload.get('recToken')
        if payload.get('cardPan'):
            subscription.card_masked = payload.get('cardPan')
        
        # –†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        is_regular = payload.get('regularCreated') == True
        if is_regular:
            subscription.recurrent_status = 'Active'
            subscription.recurrent_mode = payload.get('regularMode', 'monthly')
            subscription.recurrent_date_begin = timezone.now().date()
            subscription.recurrent_date_end = (timezone.now() + timedelta(days=365)).date()
            subscription.recurrent_next_payment = (timezone.now() + timedelta(days=duration_days)).date()
        
        # –°–±—Ä–æ—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        subscription.reminder_sent_count = 0
        subscription.reminder_sent_at = None
        subscription.last_payment_date = timezone.now()
        
        subscription.save()

    def _extend_subscription(self, subscription: Subscription, duration_days: int):
        """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        import logging
        from django.utils import timezone
        from datetime import timedelta
        
        logger = logging.getLogger(__name__)
        
        current_expiration = subscription.expires_at
        now = timezone.now()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∫–æ—Ä—å –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        anchor = max(current_expiration, now) if current_expiration else now
        new_expiration = anchor + timedelta(days=duration_days)
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"Extending subscription {subscription.id}:")
        logger.info(f"  - Current expires_at: {current_expiration}")
        logger.info(f"  - Anchor (max with now): {anchor}")
        logger.info(f"  - Duration days: {duration_days}")
        logger.info(f"  - New expires_at: {new_expiration}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription.expires_at = new_expiration
        subscription.last_payment_date = now
        subscription.status = 'active'  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
        
        # –°–±—Ä–æ—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
        subscription.reminder_sent_count = 0 
        subscription.reminder_sent_at = None
        
        subscription.save(update_fields=[
            'expires_at', 'last_payment_date', 'status', 
            'reminder_sent_count', 'reminder_sent_at', 'updated_at'
        ])
        
        logger.info(f"Subscription {subscription.id} extended successfully")
   
    def _update_or_create_invoice(self, base_reference: str, payload: Dict, bot_id: int, user_id: int, plan_id: int, amount: float, status: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –∫–∞–∫ –≤ PHP"""
        import logging
        logger = logging.getLogger(__name__)

        user = TelegramUser.objects.get(user_id=user_id)
        plan = Plan.objects.get(id=plan_id)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–±—Ä–µ–∑–∞–µ–º issuer_country –¥–æ 3 —Å–∏–º–≤–æ–ª–æ–≤ (–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã)
        issuer_country = payload.get('issuerBankCountry')
        if issuer_country:
            issuer_country = issuer_country[:3].upper()  # UA, US, UK –∏ —Ç.–¥.
        
        Invoice.objects.update_or_create(
            order_reference=base_reference,
            defaults={
                'bot_id': bot_id,
                'user': user,      # ‚úÖ –û–ë–™–ï–ö–¢
                'plan': plan,      # ‚úÖ –û–ë–™–ï–ö–¢
                'amount': amount,
                'payment_status': status,
                'transaction_id': payload.get('rrn'),
                'rec_token': payload.get('recToken'),
                'phone': payload.get('phone'),
                'email': payload.get('email'),
                'card_pan': payload.get('cardPan'),
                'card_type': payload.get('cardType'),
                'issuer_bank': payload.get('issuerBankName'),
                'issuer_country': issuer_country,  # <-- –í–û–¢ –≠–¢–û!
                'payment_system': payload.get('paymentSystem'),
                'fee': payload.get('fee'),
                'rrn': payload.get('rrn'),
                'approval_code': payload.get('approvalCode'),
                'terminal': payload.get('terminal'),
                'reason_code': payload.get('reasonCode'),
                'paid_at': timezone.now() if status == 'APPROVED' else None,
            }
        )

    def _update_verified_user(self, bot_id: int, user_id: int, payload: Dict, invoice):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from payments.models import VerifiedUser
        from core.models import TelegramUser
        from django.utils import timezone
        
        user = TelegramUser.objects.get(user_id=user_id)
        
        verified_user, created = VerifiedUser.objects.update_or_create(
            bot_id=bot_id,
            user=user,
            defaults={
                'first_payment_date': timezone.now(),
                'card_masked': payload.get('cardPan'),
                'payment_system': payload.get('paymentSystem'),
                'issuer_bank': payload.get('issuerBankName'),
                'last_payment_date': timezone.now(),
                'total_amount_paid': invoice.amount, 
                'successful_payments_count': 1,
            }
        )
        
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not created:
            verified_user.update_payment_stats(invoice)
    
    def _handle_payment_notification(self, bot_id: int, user_id: int, plan_id: int, base_reference: str, subscription):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π debounce –ª–æ–≥–∏–∫–æ–π"""
        import logging
        from django.utils import timezone
        from datetime import timedelta
        
        logger = logging.getLogger(__name__)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º paid_at –≤–º–µ—Å—Ç–æ created_at
        debounce_minutes = 10
        recent_success = Invoice.objects.filter(
            bot_id=bot_id,
            user_id=user_id,
            payment_status=PaymentStatus.APPROVED,
            paid_at__gte=timezone.now() - timedelta(minutes=debounce_minutes),  # –ò–ó–ú–ï–ù–ï–ù–û
            paid_at__isnull=False  # –î–û–ë–ê–í–õ–ï–ù–û: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ paid_at –∑–∞–ø–æ–ª–Ω–µ–Ω
        ).exclude(order_reference=base_reference).exists()
        
        if recent_success:
            logger.info(f'success_notification_suppressed: user_id={user_id}, bot_id={bot_id}, window_min={debounce_minutes}')
        else:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                from core.models import Bot
                from payments.notifications import TelegramNotificationService
                from subscriptions.models import Plan
                
                bot = Bot.objects.get(bot_id=bot_id)
                plan = Plan.objects.get(id=plan_id)
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                telegram_service = TelegramNotificationService(bot.token)
                telegram_service.notify_payment_success(
                    user_id=user_id,
                    plan_name=plan.name,
                    amount=subscription.amount,
                    currency=plan.currency,
                    expires_at=subscription.expires_at
                )
                logger.info(f'Payment notification sent to user {user_id}')
            except Exception as e:
                logger.error(f'Payment notification failed: {e}')


    def process_manual_payment(self, invoice):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
        
        1. –°–æ–∑–¥–∞–µ—Ç/–ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç Subscription
        2. –ï—Å–ª–∏ is_recurrent_manual ‚Üí –±–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (9999-12-31)
        3. –û–±–Ω–æ–≤–ª—è–µ—Ç VerifiedUser
        4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç
        """
        from django.utils import timezone
        from datetime import timedelta, datetime
        from subscriptions.models import Subscription, SubscriptionStatus
        
        import logging
        logger = logging.getLogger(__name__)
        
        user = invoice.user
        plan = invoice.plan
        bot_id = invoice.bot_id
        user_id = user.user_id
        plan_id = plan.id
        amount = float(invoice.amount)
        duration_days = plan.duration_days
        
        logger.info(f"Manual payment: user={user_id}, plan={plan_id}, recurrent={invoice.is_recurrent_manual}")
        
        # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription, created = Subscription.objects.get_or_create(
            bot_id=bot_id,
            user=user,
            defaults={
                'plan': plan,
                'starts_at': timezone.now(),
                'expires_at': timezone.now() + timedelta(days=duration_days),
                'status': SubscriptionStatus.ACTIVE,
                'amount': amount,
                'order_reference': invoice.order_reference,
            }
        )
        
        # –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if invoice.is_recurrent_manual:
            logger.info("Perpetual subscription (9999-12-31)")
            subscription.expires_at = datetime(9999, 12, 31, tzinfo=timezone.utc)
            subscription.recurrent_status = 'Active'
            subscription.recurrent_mode = 'manual'
            subscription.status = SubscriptionStatus.ACTIVE
            subscription.last_payment_date = timezone.now()
            subscription.save()
        else:
            if not created:
                self._extend_subscription(subscription, duration_days)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º VerifiedUser
        fake_payload = {
            'cardPan': 'MANUAL_****',
            'paymentSystem': 'MANUAL',
            'issuerBankName': 'Manual Payment',
        }
        self._update_verified_user(bot_id, user_id, fake_payload)
        
        logger.info(f"Manual payment processed for user {user_id}")