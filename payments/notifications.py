# payments/notifications.py
import logging
import requests
from typing import Optional
from datetime import datetime
from django.conf import settings

logger = logging.getLogger(__name__)


class TelegramNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –¥–ª—è Django)"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.api_url = f"https://api.telegram.org/bot{bot_token}"
    
    def send_message(self, chat_id: int, text: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            response = requests.post(
                f"{self.api_url}/sendMessage",
                json={
                    "chat_id": chat_id,
                    "text": text,
                    "parse_mode": parse_mode
                },
                timeout=10
            )
            response.raise_for_status()
            logger.info(f"Telegram notification sent to user {chat_id}")
            return True
        except Exception as e:
            logger.error(f"Failed to send Telegram notification to {chat_id}: {e}")
            return False
    
    def notify_payment_success(
        self,
        user_id: int,
        plan_name: str,
        amount: float,
        currency: str,
        expires_at: Optional[datetime] = None
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
        
        expires_txt = ""
        if expires_at:
            expires_txt = f"\nüìÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: <b>{expires_at.strftime('%d.%m.%Y')}</b>"
        
        text = (
            f"‚úÖ <b>–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</b>\n\n"
            f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ: <b>{amount} {currency}</b>\n"
            f"üì¶ –ü–ª–∞–Ω: <b>{plan_name}</b>\n"
            f"üéØ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞/–ø—Ä–æ–¥–ª–µ–Ω–∞{expires_txt}"
        )
        
        return self.send_message(user_id, text)
    
    def notify_payment_declined(
        self,
        user_id: int,
        order_reference: str,
        reason: Optional[str] = None
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
        
        reason_txt = f"\nüí¨ –ü—Ä–∏—á–∏–Ω–∞: {reason}" if reason else ""
        
        text = (
            f"‚ùå <b>–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
            f"üîñ –ó–∞–∫–∞–∑: <code>{order_reference}</code>{reason_txt}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )
        
        return self.send_message(user_id, text)