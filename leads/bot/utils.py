# leads/bot/utils.py
import re
import logging
from typing import Optional
from django.core.mail import send_mail
from django.conf import settings
from aiogram import Bot
from aiogram.exceptions import TelegramAPIError

logger = logging.getLogger("leads.bot")


def validate_phone(phone: str) -> tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    
    Returns:
        (is_valid, normalized_phone)
    """
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    phone = re.sub(r'[^\d+]', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç +380XXXXXXXXX
    pattern = r'^\+380\d{9}$'
    
    if re.match(pattern, phone):
        return True, phone
    
    # –ü—Ä–æ–±—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
    if phone.startswith('380') and len(phone) == 12:
        normalized = '+' + phone
        return True, normalized
    
    if phone.startswith('0') and len(phone) == 10:
        normalized = '+38' + phone
        return True, normalized
    
    return False, None


def validate_email(email: str) -> bool:
    """
    –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email.
    
    Returns:
        True –µ—Å–ª–∏ email –≤–∞–ª–∏–¥–µ–Ω
    """
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))


async def send_email_notification(
    lead_id: int,
    full_name: str,
    phone: str,
    email: Optional[str],
    comment: Optional[str],
    recipient_email: str
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ.
    
    Returns:
        True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        subject = f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{lead_id} –æ—Ç {full_name}'
        
        message = f"""
–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞!

ID –∑–∞—è–≤–∫–∏: {lead_id}
–ò–º—è: {full_name}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}
Email: {email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}

---
–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫.
        """.strip()
        
        send_mail(
            subject=subject,
            message=message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[recipient_email],
            fail_silently=False
        )
        
        logger.info(f"Email notification sent for lead #{lead_id} to {recipient_email}")
        return True
        
    except Exception as e:
        logger.error(f"Failed to send email for lead #{lead_id}: {e}")
        return False


async def send_telegram_notification(
    bot: Bot,
    admin_user_id: int,
    lead_id: int,
    full_name: str,
    phone: str,
    email: Optional[str],
    comment: Optional[str]
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ.
    
    Returns:
        True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        message = f"""
üîî <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ #{lead_id}</b>

üë§ <b>–Ü–º'—è:</b> {full_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{phone}</code>
üìß <b>Email:</b> {email or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> {comment or '–ù–µ–º–∞—î'}

---
<i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ Lead Bot</i>
        """.strip()
        
        await bot.send_message(
            chat_id=admin_user_id,
            text=message,
            parse_mode='HTML'
        )
        
        logger.info(f"Telegram notification sent for lead #{lead_id} to admin {admin_user_id}")
        return True
        
    except TelegramAPIError as e:
        logger.error(f"Failed to send Telegram notification for lead #{lead_id}: {e}")
        return False
    except Exception as e:
        logger.error(f"Unexpected error sending Telegram notification for lead #{lead_id}: {e}")
        return False


def format_lead_summary(
    full_name: str,
    phone: str,
    email: Optional[str],
    comment: Optional[str]
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    lines = [
        f"üë§ <b>–Ü–º'—è:</b> {full_name}",
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}",
    ]
    
    if email:
        lines.append(f"üìß <b>Email:</b> {email}")
    
    if comment:
        lines.append(f"üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> {comment}")
    
    return "\n".join(lines)
