# leads/bot/handlers.py
import logging
from typing import Optional
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async

from .states import LeadForm
from .keyboards import (
    get_phone_keyboard,
    get_phone_validation_keyboard,
    get_comment_question_keyboard,
    get_confirmation_keyboard,
    get_question_keyboard
)
from .utils import (
    validate_phone,
    validate_email,
    send_email_notification,
    send_telegram_notification,
    format_lead_summary
)
from leads.models import Lead, LeadBotConfig
from core.models import TelegramUser, Bot as BotModel
from aiogram.types import ReplyKeyboardRemove

logger = logging.getLogger("leads.bot")

router = Router()


async def get_or_create_user(user_id: int, username: Optional[str], first_name: Optional[str], last_name: Optional[str]) -> TelegramUser:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    user, created = await sync_to_async(TelegramUser.objects.get_or_create)(
        user_id=user_id,
        defaults={
            'username': username,
            'first_name': first_name,
            'last_name': last_name
        }
    )
    if not created and (username or first_name or last_name):
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        update_fields = []
        if username and user.username != username:
            user.username = username
            update_fields.append('username')
        if first_name and user.first_name != first_name:
            user.first_name = first_name
            update_fields.append('first_name')
        if last_name and user.last_name != last_name:
            user.last_name = last_name
            update_fields.append('last_name')
        
        if update_fields:
            await sync_to_async(user.save)(update_fields=update_fields)
    
    return user


async def get_bot_config(bot_id: int) -> Optional[LeadBotConfig]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
    try:
        bot_model = await sync_to_async(BotModel.objects.get)(bot_id=bot_id)
        config = await sync_to_async(lambda: bot_model.lead_config)()
        return config
    except (BotModel.DoesNotExist, LeadBotConfig.DoesNotExist):
        return None


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, bot_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –Ω–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏"""
    print(f"!!! CMD_START CALLED: user={message.from_user.id}, bot_id={bot_id}", flush=True)
    logger.info(f"User {message.from_user.id} started lead conversation")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_or_create_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if user.is_blocked:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ—Ä–µ–º –∏–º—è –∏ username –∏–∑ Telegram
    full_name = message.from_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    username = f"@{message.from_user.username}" if message.from_user.username else None
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(
        bot_id=bot_id,
        full_name=full_name,
        username=username
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
    config = await get_bot_config(bot_id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º welcome_text –∏–∑ –∞–¥–º–∏–Ω–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    welcome_text = config.welcome_text if config else "–ü—Ä–∏–≤—ñ—Ç! üëã\n\n–Ø –¥–æ–ø–æ–º–æ–∂—É –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É."
    welcome_text = welcome_text.replace("{name}", full_name).replace("Vlad", full_name)
    
    phone_text = config.phone_request_text if config else "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380... –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º'"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º welcome + phone –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await message.answer(
        f"{welcome_text}\n\n{phone_text}",
        reply_markup=get_phone_keyboard()
    )
    await state.set_state(LeadForm.waiting_for_phone)

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    await state.clear()
    await message.answer(
        "–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start",
        reply_markup=get_question_keyboard()
    )


@router.message(LeadForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext, bot_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    if not message.text or len(message.text.strip()) < 2:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è (–º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏)")
        return
    
    full_name = message.text.strip()
    await state.update_data(full_name=full_name)
    
    logger.info(f"User {message.from_user.id} provided name: {full_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    config = await get_bot_config(bot_id)
    phone_text = config.phone_request_text if config else "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380... –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º'"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    await message.answer(
        phone_text,
        reply_markup=get_phone_keyboard()
    )
    await state.set_state(LeadForm.waiting_for_phone)


@router.message(LeadForm.waiting_for_phone, F.contact)
async def process_contact(message: Message, state: FSMContext, bot_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.contact.phone_number
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    is_valid, normalized_phone = validate_phone(phone)
    
    if not is_valid:
        await message.answer(
            "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É:"
        )
        return
    
    await state.update_data(phone=normalized_phone)
    
    logger.info(f"User {message.from_user.id} provided phone via contact: {normalized_phone}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ state
    data = await state.get_data()
    full_name = data.get('full_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    config = await get_bot_config(bot_id)
    validation_text = f"{full_name}, —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –í–∞–º–∏?\n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    validation_text = validation_text.replace("Vlad", full_name)
    await message.answer(
        f"üìû {normalized_phone}\n\n{validation_text}",
        reply_markup=get_phone_validation_keyboard()
    )
    await state.set_state(LeadForm.validating_phone)


@router.message(LeadForm.waiting_for_phone)
async def process_phone_text(message: Message, state: FSMContext, bot_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º"""
    if not message.text:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º'")
        return
    
    phone = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    is_valid, normalized_phone = validate_phone(phone)
    
    if not is_valid:
        await message.answer(
            "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: +380671234567\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(phone=normalized_phone)
    
    logger.info(f"User {message.from_user.id} provided phone via text: {normalized_phone}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ state
    data = await state.get_data()
    full_name = data.get('full_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    config = await get_bot_config(bot_id)
    validation_text = f"{full_name}, —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –í–∞–º–∏?\n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    validation_text = validation_text.replace("Vlad", full_name)
    await message.answer(
        f"üìû {normalized_phone}\n\n{validation_text}",
        reply_markup=get_phone_validation_keyboard()
    )
    await state.set_state(LeadForm.validating_phone)


@router.callback_query(LeadForm.validating_phone, F.data == "phone:confirm")
async def phone_confirmed(callback: CallbackQuery, state: FSMContext, bot_id: int):
    """–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    full_name = data.get('full_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
    
     # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ email
    config = await get_bot_config(bot_id)
    email_text = config.email_request_text if config else f"{full_name}, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à email –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', —è–∫—â–æ –Ω–µ —Ö–æ—á–µ—Ç–µ –π–æ–≥–æ –≤–∫–∞–∑—É–≤–∞—Ç–∏"
    
    email_text = email_text.replace("Vlad", full_name)
    
    await callback.message.edit_text(
        email_text,
        reply_markup=get_comment_question_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¢–∞–∫/–ù—ñ
    )
    await state.set_state(LeadForm.waiting_for_email)

@router.callback_query(LeadForm.waiting_for_email, F.data == "comment:yes")
async def email_yes(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–∫–∞–∑–∞—Ç—å email"""
    await callback.answer()
    
    await callback.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à email:",
        reply_markup=None
    )
    # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞


@router.callback_query(LeadForm.waiting_for_email, F.data == "comment:no")
async def email_no(callback: CallbackQuery, state: FSMContext, bot_id: int):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å email - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é"""
    await callback.answer()
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º email
    await state.update_data(email=None)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    full_name = data.get('full_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    config = await get_bot_config(bot_id)
    comment_text = config.comment_request_text if config else f"{full_name}, –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫ üòä\n\n–ë–∞–∂–∞—î—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è, –∫–æ–º–µ–Ω—Ç–∞—Ä —á–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è?"
    
    comment_text = comment_text.replace("Vlad", full_name)
    
    await callback.message.edit_text(
        comment_text,
        reply_markup=get_comment_question_keyboard()
    )
    await state.set_state(LeadForm.asking_for_comment)


@router.message(LeadForm.waiting_for_email)
async def process_email(message: Message, state: FSMContext, bot_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email —Ç–µ–∫—Å—Ç–æ–º"""
    if not message.text:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å email")
        return
    
    email = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    is_valid, validated_email = validate_email(email)
    
    if not is_valid:
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: user@example.com\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(email=validated_email)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    full_name = data.get('full_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    config = await get_bot_config(bot_id)
    comment_text = config.comment_request_text if config else f"{full_name}, –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫ üòä\n\n–ë–∞–∂–∞—î—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è, –∫–æ–º–µ–Ω—Ç–∞—Ä —á–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è?"
    
    comment_text = comment_text.replace("Vlad", full_name)
    
    await message.answer(
        comment_text,
        reply_markup=get_comment_question_keyboard()
    )
    await state.set_state(LeadForm.asking_for_comment)

@router.callback_query(LeadForm.validating_phone, F.data == "phone:edit")
async def phone_edit(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"""
    await callback.answer()
    
    await callback.message.edit_text(
        "–ì–∞—Ä–∞–∑–¥, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=None
    )
    await state.set_state(LeadForm.waiting_for_phone)


@router.callback_query(LeadForm.asking_for_comment, F.data == "comment:yes")
async def comment_yes(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    await callback.answer()
    
    await callback.message.edit_text(
        "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–±–∞–∂–∞–Ω–Ω—è, –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:",
        reply_markup=None
    )
    await state.set_state(LeadForm.waiting_for_comment)


@router.callback_query(LeadForm.asking_for_comment, F.data == "comment:no")
async def comment_no(callback: CallbackQuery, state: FSMContext, bot_id: int):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await state.update_data(comment=None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    summary = format_lead_summary(
        full_name=data['full_name'],
        phone=data['phone'],
        email=data.get('email'),
        comment=data.get('comment')
    )
    
    await callback.message.edit_text(
        f"<b>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—ñ –¥–∞–Ω—ñ:</b>\n\n{summary}\n\n<i>–í—Å–µ –≤—ñ—Ä–Ω–æ?</i>",
        reply_markup=get_confirmation_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(LeadForm.confirming_data)


@router.message(LeadForm.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext, bot_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    if not message.text:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è")
        return
    
    comment = message.text.strip()
    await state.update_data(comment=comment)
    
    logger.info(f"User {message.from_user.id} provided comment")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    summary = format_lead_summary(
        full_name=data['full_name'],
        phone=data['phone'],
        email=data.get('email'),
        comment=data.get('comment')
    )
    
    await message.answer(
        f"<b>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—ñ –¥–∞–Ω—ñ:</b>\n\n{summary}\n\n<i>–í—Å–µ –≤—ñ—Ä–Ω–æ?</i>",
        reply_markup=get_confirmation_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(LeadForm.confirming_data)


@router.callback_query(LeadForm.confirming_data, F.data == "confirm:yes")
async def confirm_and_save(callback: CallbackQuery, state: FSMContext, bot: Bot, bot_id: int):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    full_name = data['full_name']
    phone = data['phone']
    email = data.get('email')
    comment = data.get('comment')
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await sync_to_async(TelegramUser.objects.get)(user_id=callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –±–æ—Ç–∞
        bot_model = await sync_to_async(BotModel.objects.get)(bot_id=bot_id)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        lead = await sync_to_async(Lead.objects.create)(
            bot=bot_model,
            user=user,
            full_name=full_name,
            phone=phone,
            email=email,
            comment=comment,
            status='new'
        )
        
        logger.info(f"Lead #{lead.id} created for user {callback.from_user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        config = await get_bot_config(bot_id)
        
        # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        # if config and config.notification_email:
        #     email_sent = await send_email_notification(
        #         lead_id=lead.id,
        #         full_name=full_name,
        #         phone=phone,
        #         email=email,
        #         comment=comment,
        #         recipient_email=config.notification_email
        #     )
        #     if email_sent:
        #         lead.email_sent = True
        #         await sync_to_async(lead.save)(update_fields=['email_sent'])
        
        # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if config and config.admin_user_id:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞
            bot_model = await sync_to_async(BotModel.objects.get)(bot_id=bot_id)
            bot_title = bot_model.title
            
            telegram_sent = await send_telegram_notification(
                bot=bot,
                admin_user_id=config.admin_user_id,
                bot_title=bot_title,
                lead_id=lead.id,
                full_name=full_name,
                username=data.get('username'),
                phone=phone,
                email=email,
                comment=comment
            )
            if telegram_sent:
                lead.telegram_sent = True
                await sync_to_async(lead.save)(update_fields=['telegram_sent'])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —É—Å–ø–µ—Ö–∞
        success_text = config.success_text if config else "–î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞. –ó –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
        success_text = success_text.replace("Vlad", full_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.edit_text(
            success_text,
            reply_markup=get_question_keyboard(),
            parse_mode='HTML'
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error saving lead for user {callback.from_user.id}: {e}")
        await callback.message.edit_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
            reply_markup=get_question_keyboard()
        )
        await state.clear()


@router.callback_query(LeadForm.confirming_data, F.data == "confirm:edit")
async def confirm_edit(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ"""
    await callback.answer()
    
    await callback.message.edit_text(
        "–ì–∞—Ä–∞–∑–¥, –ø–æ—á–Ω–µ–º–æ –∑–∞–Ω–æ–≤–æ.\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
        reply_markup=None
    )
    await state.set_state(LeadForm.waiting_for_name)


@router.callback_query(F.data == "new_question")
async def new_question(callback: CallbackQuery, state: FSMContext, bot_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–Ñ –ø–∏—Ç–∞–Ω–Ω—è' - –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = await get_bot_config(bot_id)
    welcome_text = config.welcome_text if config else "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É.\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:"
    
    await callback.message.edit_text(
        welcome_text,
        reply_markup=None
    )
    await state.set_state(LeadForm.waiting_for_name)


def register_handlers(dp, bot_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö handlers –≤ dispatcher"""
    # –î–æ–±–∞–≤–ª—è–µ–º bot_id –≤ middleware –¥–ª—è –≤—Å–µ—Ö handlers
    @router.message.middleware()
    @router.callback_query.middleware()
    async def inject_bot_id(handler, event, data):
        data['bot_id'] = bot_id
        return await handler(event, data)
    
    dp.include_router(router)

    #–õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Lead handlers registered for bot_id={bot_id}")